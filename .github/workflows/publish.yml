# This workflow will upload a Python Package to Release asset
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries


name: Create Release

on:
  push:
    branches:
      - release/*

# Needed to create release and upload assets
# permissions:
#   contents: write

permissions: write-all

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Extract branch info
        shell: bash
        run: |
          release_tag=$(echo "${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" | sed -e 's/.*\///g')
          echo "release_tag=$release_tag" >> $GITHUB_ENV
        id: extract_branch

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.release_tag }}
          release_name: ${{ env.release_tag }}

  wheel:
    name: Build Wheel
    runs-on: ${{ matrix.os }}
    needs: release
    
    strategy:
      fail-fast: false
      matrix:
          os: ['ubuntu-22.04']
          python-version: ['3.8', '3.9', '3.10']
          cuda-version: ['11.8'] # Github runner can't build anything older than 11.8

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Linux Env and install Python
        if: ${{ runner.os == 'Linux' }}
        run: |
          bash .github/workflows/scripts/env.sh ${{ matrix.python-version }}
        shell:
          bash

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/scripts/cuda-install.sh ${{ matrix.cuda-version }} ${{ matrix.os }}
        shell:
          bash

      - name: Load and check GPU Env
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          export CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}
          export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:${LD_LIBRARY_PATH}
          export PATH=${CUDA_HOME}/bin:${PATH}
          nvcc --version
        shell:
          bash

      - name: Install PyTorch-cu${{ matrix.cuda-version }}
        run: |
          PYTHON_EXECUTABLE=python${{ matrix.python-version }}
          CUDA_VERSION=${{ matrix.cuda-version }}
          $PYTHON_EXECUTABLE -m pip install numpy pyyaml scipy ipython mkl mkl-include ninja cython typing pandas typing-extensions dataclasses setuptools && conda clean -ya
          $PYTHON_EXECUTABLE -m pip install torch -f https://download.pytorch.org/whl/cu${CUDA_VERSION//./}/torch_stable.html
          $PYTHON_EXECUTABLE --version
          $PYTHON_EXECUTABLE -c "import torch; print('PyTorch:', torch.__version__)"
          $PYTHON_EXECUTABLE -c "import torch; print('CUDA:', torch.version.cuda)"
          $PYTHON_EXECUTABLE -c "from torch.utils import cpp_extension; print (cpp_extension.CUDA_HOME)"
        shell:
          bash

      - name: Build wheel
        run: |
          PYTHON_EXECUTABLE=python${{ matrix.python-version }}
          CUDA_HOME=/usr/local/cuda-${{ matrix.cuda-version }}
          export PATH=${CUDA_HOME}/bin:$PATH
          export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:$LD_LIBRARY_PATH
          $PYTHON_EXECUTABLE -m pip install wheel packaging
          $PYTHON_EXECUTABLE -m pip install -r requirements.txt
          $PYTHON_EXECUTABLE setup.py bdist_wheel --dist-dir=dist
          tmpname=cu${{ matrix.cuda-version }}
          wheel_name=$(ls dist/*whl | xargs -n 1 basename | sed "s/-/-$tmpname-/2")
          ls dist/*whl |xargs -I {} mv {} ${wheel_name}
          echo "wheel_name=${wheel_name}" >> $GITHUB_ENV
      
      - name: Upload Release Asset
        id: upload_release_asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./${{env.wheel_name}}
          asset_name: ${{env.wheel_name}}
          asset_content_type: application/*
